
'use client';

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Users, 
  Package, 
  ShoppingBag, 
  DollarSign,
  TrendingUp,
  MessageCircle,
  Crown,
  Activity
} from 'lucide-react';
import Link from 'next/link';

export default function AdminOverview() {
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalProducts: 0,
    totalOrders: 0,
    totalRevenue: 0,
    vipMembers: 0,
    contactMessages: 0,
    arraysGenerated: 0,
    activeUsers: 0,
  });

  const [recentActivity, setRecentActivity] = useState([
    { id: '1', type: 'user_signup', message: 'New user registered: Sarah Johnson', time: '2 minutes ago' },
    { id: '2', type: 'order', message: 'Order #ANA-2024-045 completed', time: '15 minutes ago' },
    { id: '3', type: 'vip_signup', message: 'New VIP waitlist member: Michael Chen', time: '1 hour ago' },
    { id: '4', type: 'array_generated', message: 'Healing array generated by Emma Davis', time: '2 hours ago' },
    { id: '5', type: 'contact', message: 'New contact message received', time: '3 hours ago' },
  ]);

  useEffect(() => {
    // TODO: Fetch real data from API
    setStats({
      totalUsers: 147,
      totalProducts: 6,
      totalOrders: 89,
      totalRevenue: 12456.78,
      vipMembers: 23,
      contactMessages: 15,
      arraysGenerated: 234,
      activeUsers: 42,
    });
  }, []);

  const statCards = [
    {
      title: 'Total Users',
      value: stats.totalUsers,
      icon: Users,
      color: 'text-blue-400',
      bgColor: 'bg-blue-500/20',
      borderColor: 'border-blue-500/30',
      href: '/admin/users',
    },
    {
      title: 'Products',
      value: stats.totalProducts,
      icon: Package,
      color: 'text-green-400',
      bgColor: 'bg-green-500/20',
      borderColor: 'border-green-500/30',
      href: '/admin/products',
    },
    {
      title: 'Total Orders',
      value: stats.totalOrders,
      icon: ShoppingBag,
      color: 'text-purple-400',
      bgColor: 'bg-purple-500/20',
      borderColor: 'border-purple-500/30',
      href: '/admin/orders',
    },
    {
      title: 'Revenue',
      value: `$${stats.totalRevenue.toFixed(2)}`,
      icon: DollarSign,
      color: 'text-emerald-400',
      bgColor: 'bg-emerald-500/20',
      borderColor: 'border-emerald-500/30',
      href: '/admin/analytics',
    },
    {
      title: 'VIP Members',
      value: stats.vipMembers,
      icon: Crown,
      color: 'text-yellow-400',
      bgColor: 'bg-yellow-500/20',
      borderColor: 'border-yellow-500/30',
      href: '/admin/users?filter=vip',
    },
    {
      title: 'Contact Messages',
      value: stats.contactMessages,
      icon: MessageCircle,
      color: 'text-teal-400',
      bgColor: 'bg-teal-500/20',
      borderColor: 'border-teal-500/30',
      href: '/admin/contacts',
    },
    {
      title: 'Arrays Generated',
      value: stats.arraysGenerated,
      icon: TrendingUp,
      color: 'text-pink-400',
      bgColor: 'bg-pink-500/20',
      borderColor: 'border-pink-500/30',
      href: '/admin/analytics',
    },
    {
      title: 'Active Users (24h)',
      value: stats.activeUsers,
      icon: Activity,
      color: 'text-orange-400',
      bgColor: 'bg-orange-500/20',
      borderColor: 'border-orange-500/30',
      href: '/admin/users',
    },
  ];

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'user_signup':
        return Users;
      case 'order':
        return ShoppingBag;
      case 'vip_signup':
        return Crown;
      case 'array_generated':
        return TrendingUp;
      case 'contact':
        return MessageCircle;
      default:
        return Activity;
    }
  };

  const getActivityColor = (type: string) => {
    switch (type) {
      case 'user_signup':
        return 'text-blue-400';
      case 'order':
        return 'text-green-400';
      case 'vip_signup':
        return 'text-yellow-400';
      case 'array_generated':
        return 'text-purple-400';
      case 'contact':
        return 'text-teal-400';
      default:
        return 'text-gray-400';
    }
  };

  return (
    <div className="space-y-6">
      {/* Welcome Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mystical-card p-6 rounded-lg"
      >
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-white mb-2">
              Welcome to Admin Dashboard üõ°Ô∏è
            </h1>
            <p className="text-gray-300">
              Manage your ANOINT Array platform with sacred precision
            </p>
          </div>
          <div className="hidden md:block">
            <div className="w-16 h-16 bg-yellow-600/30 rounded-full flex items-center justify-center">
              <TrendingUp className="h-8 w-8 text-yellow-400" />
            </div>
          </div>
        </div>
      </motion.div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {statCards.map((stat, index) => (
          <motion.div
            key={stat.title}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <Link href={stat.href} className="block">
              <div className={`mystical-card p-6 rounded-lg border ${stat.borderColor} hover:scale-105 transition-all duration-300 cursor-pointer`}>
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-400 text-sm mb-1">{stat.title}</p>
                    <p className="text-2xl font-bold text-white">{stat.value}</p>
                  </div>
                  <div className={`p-3 rounded-full ${stat.bgColor}`}>
                    <stat.icon className={`h-6 w-6 ${stat.color}`} />
                  </div>
                </div>
              </div>
            </Link>
          </motion.div>
        ))}
      </div>

      {/* Recent Activity */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
        className="mystical-card p-6 rounded-lg"
      >
        <h2 className="text-xl font-bold text-white mb-4">Recent Activity</h2>
        <div className="space-y-3">
          {recentActivity.map((activity, index) => {
            const ActivityIcon = getActivityIcon(activity.type);
            return (
              <motion.div
                key={activity.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 + index * 0.1 }}
                className="flex items-center space-x-3 p-3 bg-gray-800/50 rounded-lg"
              >
                <div className="flex-shrink-0">
                  <ActivityIcon className={`h-5 w-5 ${getActivityColor(activity.type)}`} />
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm text-white truncate">
                    {activity.message}
                  </p>
                  <p className="text-xs text-gray-400">
                    {activity.time}
                  </p>
                </div>
              </motion.div>
            );
          })}
        </div>
      </motion.div>

      {/* Quick Actions */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.7 }}
        className="mystical-card p-6 rounded-lg"
      >
        <h2 className="text-xl font-bold text-white mb-4">Quick Actions</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Link href="/admin/products" className="group">
            <motion.div
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="bg-gray-800/50 border border-gray-700 rounded-lg p-4 hover:border-purple-500/50 transition-all duration-300"
            >
              <Package className="h-8 w-8 text-purple-400 mb-3" />
              <h3 className="font-semibold text-white group-hover:aurora-text">
                Manage Products
              </h3>
              <p className="text-gray-400 text-sm">
                Add, edit, and organize your sacred healing products
              </p>
            </motion.div>
          </Link>

          <Link href="/admin/users" className="group">
            <motion.div
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="bg-gray-800/50 border border-gray-700 rounded-lg p-4 hover:border-purple-500/50 transition-all duration-300"
            >
              <Users className="h-8 w-8 text-blue-400 mb-3" />
              <h3 className="font-semibold text-white group-hover:aurora-text">
                User Management
              </h3>
              <p className="text-gray-400 text-sm">
                View and manage user accounts and permissions
              </p>
            </motion.div>
          </Link>

          <Link href="/admin/array-config" className="group">
            <motion.div
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="bg-gray-800/50 border border-gray-700 rounded-lg p-4 hover:border-purple-500/50 transition-all duration-300"
            >
              <TrendingUp className="h-8 w-8 text-emerald-400 mb-3" />
              <h3 className="font-semibold text-white group-hover:aurora-text">
                Array Configuration
              </h3>
              <p className="text-gray-400 text-sm">
                Configure the sacred geometry array generator
              </p>
            </motion.div>
          </Link>
        </div>
      </motion.div>
    </div>
  );
}
