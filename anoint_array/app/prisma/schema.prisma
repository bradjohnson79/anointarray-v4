generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String    @default("USER")
  phone         String?
  address       Json?     // Full address object
  lastLoginAt   DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  formType  String   @default("contact")
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_forms")
}

model VipWaitlist {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  interests String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vip_waitlist")
}

model Product {
  id              String      @id @default(cuid())
  name            String
  slug            String      @unique
  teaserDescription String?   @db.VarChar(500) // Under 100 words teaser
  fullDescription String?     @db.Text // Full product description
  price           Decimal     @db.Decimal(10, 2)
  category        String
  isVip           Boolean     @default(false)
  inStock         Boolean     @default(true)
  isPhysical      Boolean     @default(true)
  isDigital       Boolean     @default(false)
  imageUrl        String?
  imageGallery    String[]    // Array of additional image URLs
  videoEmbedCode  String?     @db.Text // Video embed code for product showcase
  featured        Boolean     @default(false)
  comingSoon      Boolean     @default(false)
  inventory       Int?        // Stock count
  weight          Decimal?    @db.Decimal(8, 3) // For shipping calculations
  dimensions      Json?       // Length, width, height for shipping
  digitalFileUrl  String?     // For digital products
  instructionManualUrl String? // PDF instruction manual URL
  // Customs & Compliance Fields
  hsCode          String?     @map("hs_code")
  countryOfOrigin String?     @map("country_of_origin") @db.Char(2)
  customsDescription String? @map("customs_description")
  defaultCustomsValueCad Decimal? @map("default_customs_value_cad") @db.Decimal(12, 2)
  massGrams       Int?        @map("mass_grams")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  variants        ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  style     String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int      @default(0)
  sku       String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_variants")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?     // Optional - for guest orders
  customerEmail   String
  customerName    String
  customerPhone   String?
  status          String      @default("pending") // pending, processing, shipped, delivered, cancelled, refunded
  totalAmount     Decimal     @db.Decimal(10, 2)
  subtotal        Decimal?    @db.Decimal(10, 2)
  taxAmount       Decimal?    @db.Decimal(10, 2)
  shippingAmount  Decimal?    @db.Decimal(10, 2)
  shippingAddress Json?       // Full address object
  billingAddress  Json?       // Full address object
  paymentStatus   String      @default("pending") // pending, paid, failed, refunded
  paymentMethod   String?     // stripe, paypal, crypto
  stripePaymentId String?
  paypalOrderId   String?
  cryptoAddress   String?
  notes           String?     // Admin notes
  trackingNumber  String?     // Shipping tracking
  shippedAt       DateTime?   // When order was shipped
  deliveredAt     DateTime?   // When order was delivered
  cancelledAt     DateTime?   // When order was cancelled
  refundAmount    Decimal?    @db.Decimal(10, 2)
  refundedAt      DateTime?   // When order was refunded
  isAbandoned     Boolean     @default(false) // For abandoned cart tracking
  abandonedAt     DateTime?   // When cart was abandoned
  // Tax & Customs Fields
  buyerCountry    String      @map("buyer_country") @db.Char(2) @default("CA")
  shippingCountry String      @map("shipping_country") @db.Char(2) @default("CA")
  taxSubtotalCad  Decimal     @map("tax_subtotal_cad") @db.Decimal(12, 2) @default(0)
  taxBreakdown    Json        @map("tax_breakdown") @default("{}")
  dutiesEstimatedCad Decimal  @map("duties_estimated_cad") @db.Decimal(12, 2) @default(0)
  taxesEstimatedCad Decimal   @map("taxes_estimated_cad") @db.Decimal(12, 2) @default(0)
  dutiesTaxesCurrency String  @map("duties_taxes_currency") @db.Char(3) @default("CAD")
  incoterm        String      @default("DDP")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User?       @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  shipments       Shipment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  // Customs snapshot at purchase time
  hsCode          String?  @map("hs_code")
  countryOfOrigin String?  @map("country_of_origin") @db.Char(2)
  customsDescription String? @map("customs_description")
  unitValueCad    Decimal? @map("unit_value_cad") @db.Decimal(12, 2)
  massGramsEach   Int?     @map("mass_grams_each")
  isDigital       Boolean  @map("is_digital") @default(false)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Shipment {
  id              String      @id @default(cuid())
  orderId         String      @map("order_id")
  carrier         String      @default("canadapost")
  incoterm        String      @default("DDP")
  customsReason   String      @map("customs_reason") @default("SOLD")
  labelMeta       Json?       @map("label_meta")
  apiAudit        Json?       @map("api_audit")
  trackingNumber  String?     @map("tracking_number")
  labelUrl        String?     @map("label_url")
  cost            Decimal?    @db.Decimal(10, 2)
  service         String?
  estimatedDelivery DateTime? @map("estimated_delivery")
  status          String      @default("pending") // pending, created, used, cancelled
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  order           Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("shipments")
}

model Affiliate {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  code        String   @unique
  commission  Decimal  @default(15.00) @db.Decimal(5, 2)
  status      String   @default("active")
  totalEarned Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("affiliates")
}

/// Generic application configuration storage for serverless platforms.
/// Stores small JSON blobs keyed by name (e.g., 'ai-config', 'storefront-payments').
model AppConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("app_config")
}
